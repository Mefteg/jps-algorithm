"use strict";

var Utils = require('utils');

var JPS = function() {};

JPS.isStraightDirection = function(_direction)
{
    return  (   _direction == Utils.DirectionEnum.North || _direction == Utils.DirectionEnum.South 
            ||  _direction == Utils.DirectionEnum.East || _direction == Utils.DirectionEnum.West);
}

JPS.isForcedNeighborAround = function(_map, _coord, _direction)
{
    var x = _coord.x;
    var y = _coord.y;

    switch(_direction)
    {
        case Utils.DirectionEnum.East:
        {
            return ((_map.get(x, y-1) == 0 && _map.get(x+1, y-1) > 0)) || ((_map.get(x, y+1) == 0 && _map.get(x+1, y+1) > 0));
        }
        case Utils.DirectionEnum.West:
        {
            return ((_map.get(x, y-1) == 0 && _map.get(x-1, y-1) > 0)) || ((_map.get(x, y+1) == 0 && _map.get(x-1, y+1) > 0));
        }
        case Utils.DirectionEnum.North:
        {
            return ((_map.get(x+1, y) == 0 && _map.get(x+1, y-1) > 0)) || ((_map.get(x-1, y) == 0 && _map.get(x-1, y-1) > 0));
        }
        case Utils.DirectionEnum.South:
        {
            return ((_map.get(x+1, y) == 0 && _map.get(x+1, y+1) > 0)) || ((_map.get(x-1, y) == 0 && _map.get(x-1, y+1) > 0));
        }
        case Utils.DirectionEnum.NorthEast:
        {
            return ((_map.get(x-1, y) == 0 && _map.get(x-1, y-1) > 0)) || ((_map.get(x, y+1) == 0 && _map.get(x+1, y+1) > 0));
        }
        case Utils.DirectionEnum.NorthWest:
        {
            return ((_map.get(x+1, y) == 0 && _map.get(x+1, y-1) > 0)) || ((_map.get(x, y+1) == 0 && _map.get(x-1, y+1) > 0));
        }
        case Utils.DirectionEnum.SouthEast:
        {
            return ((_map.get(x-1, y) == 0 && _map.get(x-1, y+1) > 0)) || ((_map.get(x, y-1) == 0 && _map.get(x+1, y-1) > 0));
        }
        case Utils.DirectionEnum.SouthWest:
        {
            return ((_map.get(x+1, y) == 0 && _map.get(x+1, y+1) > 0)) || ((_map.get(x, y-1) == 0 && _map.get(x-1, y-1) > 0));
        }
    }
}

JPS.goStraight = function(_map, _parentCoord, _parentDirection, _destination, _coords)
{
    var stepX = 0;
    var stepY = 0;

    switch(_parentDirection)
    {
        case Utils.DirectionEnum.East:
        {
            stepX = 1;
            break;
        }
        case Utils.DirectionEnum.West:
        {
            stepX = -1;
            break;
        }
        case Utils.DirectionEnum.North:
        {
            stepY = -1;
            break;
        }
        case Utils.DirectionEnum.South:
        {
            stepY = 1;
            break;
        }
    }

    var currentCoord = new Utils.Coord(_parentCoord.x + stepX, _parentCoord.y + stepY);
    while (currentCoord.x >= 0 && currentCoord.x < _map.width && currentCoord.y >= 0 && currentCoord.y < _map.height)
    {
        if (_map.get(currentCoord.x, currentCoord.y) == 0)
        {
            return;
        }
        
        _map.set(currentCoord.x, currentCoord.y, 5);

        if (currentCoord.equals(_destination) || JPS.isForcedNeighborAround(_map, currentCoord, _parentDirection))
        {
            _coords.push(currentCoord);

            return;
        }

        currentCoord.x += stepX;
        currentCoord.y += stepY;
    }
}

JPS.goDiagonnally = function(_map, _parentCoord, _parentDirection, _destination, _coords)
{
    var stepX = 0;
    var stepY = 0;

    var verticalDirection   = Utils.DirectionEnum.North;
    var horizontalDirection = Utils.DirectionEnum.East;

    switch(_parentDirection)
    {
        case Utils.DirectionEnum.NorthEast:
        {
            stepX = 1;
            stepY = -1;
            verticalDirection   = Utils.DirectionEnum.North;
            horizontalDirection = Utils.DirectionEnum.East;
            break;
        }
        case Utils.DirectionEnum.NorthWest:
        {
            stepX = -1;
            stepY = -1;
            verticalDirection   = Utils.DirectionEnum.North;
            horizontalDirection = Utils.DirectionEnum.West;
            break;
        }
        case Utils.DirectionEnum.SouthEast:
        {
            stepX = 1;
            stepY = 1;
            verticalDirection   = Utils.DirectionEnum.South;
            horizontalDirection = Utils.DirectionEnum.East;
            break;
        }
        case Utils.DirectionEnum.SouthWest:
        {
            stepX = -1;
            stepY = 1;
            verticalDirection   = Utils.DirectionEnum.South;
            horizontalDirection = Utils.DirectionEnum.West;
            break;
        }
    }

    var currentCoord = new Utils.Coord(_parentCoord.x + stepX, _parentCoord.y + stepY);
    while (currentCoord.x >= 0 && currentCoord.x < _map.width && currentCoord.y >= 0 && currentCoord.y < _map.height)
    {
        if (_map.get(currentCoord.x, currentCoord.y) > 0)
        {
            _map.set(currentCoord.x, currentCoord.y, 6);

            if (currentCoord.equals(_destination) || JPS.isForcedNeighborAround(_map, currentCoord, _parentDirection))
            {
                _coords.push(currentCoord);
                break;
            }
            else
            {
                var tmpCoords = [];
                JPS.goStraight(_map, currentCoord, verticalDirection, _destination, tmpCoords);
                JPS.goStraight(_map, currentCoord, horizontalDirection, _destination, tmpCoords);
                if (tmpCoords.length > 0)
                {
                    _coords.push(currentCoord);
                    break;
                }
            }

            currentCoord.x += stepX;
            currentCoord.y += stepY;
        }
        else
        {
            break;
        }
    }
}

// EXPORT
module.exports = JPS;