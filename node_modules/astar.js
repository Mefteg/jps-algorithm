"use strict";

var Utils = require('utils');
var JPS = require('jps');

var AStar = function(_map, _source, _destination)
{
    this.map = _map;
    this.source = _source;
    this.destination = _destination;

    this.openList = [];
    this.closeList = [];

    this.currentNode = _source;

    /////////////////////////////////////////////

    this.update = function()
    {
        // put current node to close list
        this.closeList.push(this.currentNode);

        // check destination
        if (this.currentNode.coord.equals(this.destination.coord))
        {
            return true;
        }

        // get neighbors
        var neighbors = this.getNodeNeighbors(this.currentNode);

        var openList = this.openList;
        var closeList = this.closeList;

        // add/update neighbors in open list
        var nbNeighbors = neighbors.length;
        neighbors.forEach(function(item) {
            // if the neighbor isn't in the close list
            if (closeList.indexOf(item) == -1)
            {
                var index = openList.indexOf(item);
                // if the node already exists in the open list
                if (index > -1)
                {
                    // update the cost if its lower
                    if (openList[index].cost < item.cost)
                    {
                        openList[index].cost = item.cost;
                    }
                }
                else
                {
                    // otherwise, add it
                    openList.push(item);
                }
            }
        });

        // update current node
        this.currentNode = this.getNodeWithLowerCostToDestination();

        return false;
    };

    this.getNodeNeighbors = function(_node)
    {
        var coords = [];

        JPS.goStraight(this.map, _node.coord, Utils.DirectionEnum.East, this.destination.coord, coords);
        JPS.goStraight(this.map, _node.coord, Utils.DirectionEnum.West, this.destination.coord, coords);
        JPS.goStraight(this.map, _node.coord, Utils.DirectionEnum.North, this.destination.coord, coords);
        JPS.goStraight(this.map, _node.coord, Utils.DirectionEnum.South, this.destination.coord, coords);

        JPS.goDiagonnally(this.map, _node.coord, Utils.DirectionEnum.NorthEast, this.destination.coord, coords);
        JPS.goDiagonnally(this.map, _node.coord, Utils.DirectionEnum.NorthWest, this.destination.coord, coords);
        JPS.goDiagonnally(this.map, _node.coord, Utils.DirectionEnum.SouthEast, this.destination.coord, coords);
        JPS.goDiagonnally(this.map, _node.coord, Utils.DirectionEnum.SouthWest, this.destination.coord, coords);


        return coords.map(function(item) {
            var cost = _node.cost + item.distance(_node.coord);

            return new Utils.Node(item, cost, _node);
        });
    };

    this.getNodeWithLowerCostToDestination = function()
    {
        // sort higher cost to lower cost
        this.openList.sort(function(item0, item1) {
            if (item0.cost < item1.cost)
            {
                return 1;
            }
            else if (item0.cost > item1.cost)
            {
                return -1;
            }
            else
            {
                return 0;
            }
        });

        // pop the last node (the one with the lowest cost)
        return this.openList.pop();
    };

    this.getPath = function()
    {
        var path = [];

        var node = this.currentNode;
        while (node != null)
        {
            path.push(node);
            node = node.parent;
        }

        return path.reverse();
    }
};

// EXPORT
module.exports = AStar;